;cabal run meta ./lib/prelude.meta ./lib/arith.meta ./lib/list.meta ./lib/bool.meta ./lib/define.meta ./lib/test.meta
(define null?
  (lambda (x)
    (eq? x ())))

(define list (lambda args args))

(define nth
  (lambda (n lst)
    (if (eq? n 0)
        (fst lst)
        (nth (sub n 1) (snd lst)))))

(define foldr
  (lambda (f z lst)
    (if (null? lst)
        z
        (f (fst lst) (foldr f z (snd lst))))))

(define map
  (lambda (f lst)
    (if (null? lst)
        '()
        (cons (f (fst lst)) (map f (snd lst))))))

(define let
  (macro (binding body)
    '((lambda (,(fst binding)) ,body) ,(fst (snd binding)))))

(define reverseList
  (lambda (acc lst)
    (if (null? lst)
        acc
        (reverseList (cons (fst lst) acc) (snd lst)))))

(define foldlHelper
  (lambda (f z lst)
    (if (null? lst)
        z
        (f (foldlHelper f z (snd lst)) (fst lst)))))

(define foldl
  (lambda (f z lst)
    (foldlHelper f z (reverseList nil lst))))